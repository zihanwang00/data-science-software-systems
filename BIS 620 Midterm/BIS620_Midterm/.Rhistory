getwd（
getwd()
getwd()
shiny::runApp('Users/zihanwang/Documents/GitHub/data-science-software-systems/BIS 620 Midterm/BIS620_Midterm')
runApp('Users/zihanwang/Documents/GitHub/data-science-software-systems/BIS 620 Midterm/BIS620_Midterm')
runApp('Users/zihanwang/Documents/GitHub/data-science-software-systems/BIS 620 Midterm/BIS620_Midterm')
runApp('Users/zihanwang/Documents/GitHub/data-science-software-systems/BIS 620 Midterm/BIS620_Midterm')
runApp('Users/zihanwang/Documents/GitHub/data-science-software-systems/BIS 620 Midterm/BIS620_Midterm')
con = dbConnect(
duckdb(
file.path("..", "..", "2023-09-27", "ctgov.duckdb"),
read_only = TRUE
)
)
getwd()
library(dplyr)
library(duckdb)
library(dplyr)
library(DBI)
library(DT)
library(ggplot2)
library(tidyr)
library(purrr)
library(countrycode)
library(rnaturalearth)
library(rnaturalearthdata)
library(RColorBrewer)
con = dbConnect(
duckdb(
file.path("..", "..", "2023-09-27", "ctgov.duckdb"),
read_only = TRUE
)
)
con = dbConnect(
duckdb(
file.path("..", "..", "2023-09-27", "ctgov.duckdb"),
read_only = TRUE
)
)
con = dbConnect(
duckdb(
file.path("..", "..", "2023-09-27", "ctgov.duckdb")
# read_only = TRUE
)
)
setwd("~/Documents/GitHub/data-science-software-systems/BIS 620 Midterm/BIS620_Midterm")
setwd("~/Documents/GitHub/data-science-software-systems")
con = dbConnect(
duckdb(
file.path("..", "..", "2023-09-27", "ctgov.duckdb"),
read_only = TRUE
)
)
setwd("~/Documents/GitHub/data-science-software-systems/Capstone project")
con = dbConnect(
duckdb(
file.path("..", "..", "2023-09-27", "ctgov1.duckdb"),
read_only = TRUE
)
)
setwd("~/Documents/GitHub/data-science-software-systems/BIS 620 Midterm/BIS620_Midterm")
setwd("~/Documents/GitHub/data-science-software-systems“）
,
.
''
------）））））
)))
rm
/''
setwd("~/Documents/GitHub/data-science-software-systems“）
setwd("~/Documents/GitHub/data-science-software-systems"）
con = dbConnect(
duckdb(
file.path("..", "..", "2023-09-27", "ctgov1.duckdb"),
read_only = TRUE
)
)
runApp()
source("~/Documents/GitHub/data-science-software-systems/BIS 620 Midterm/BIS620_Midterm/ct-util.R", echo=TRUE)
runApp()
runApp()
runApp()
get_outcome_pie_for_intervention <- function(interventionType) {
interventions <- tbl(con, "interventions")
outcomes <- tbl(con, "outcomes")
selected_interventions <- interventions %>%
filter(intervention_type == interventionType)
# join outcomes and interventions:
intervention_outcomes <- selected_interventions %>%
left_join(outcomes, by = "nct_id")
num_outcomes <- intervention_outcomes |>
count(outcome_type) |>
arrange(desc(n))
num_outcomes
# Generate pie chart
ggplot(num_outcomes, aes(x = "", y = n, fill = outcome_type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
labs(fill = "Outcome Type")
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
studies |>
left_join(conditions, by="nct_id") |>
pivot_longer(cols = everything()) |> # make start_date, completion_date in one column
select(-name) |>
distinct() |> # distinct value (date)
arrange(value) |>
na.omit() |>
rename(date = value)
all_dates = studies |>
left_join(conditions, by="nct_id") |>
pivot_longer(cols = everything()) |> # make start_date, completion_date in one column
select(-name) |>
distinct() |> # distinct value (date)
arrange(value) |>
na.omit() |>
rename(date = value)
# find the unique dates, see if trials are active on those dates
within_date = function(date, starts, ends) {
date >= starts & date <= ends
}
# Get the number of concurrent trials at each of the unique dates.
all_dates$count =
map_dbl(
all_dates$date,
~ .x |>
within_date(d$start_date, d$completion_date) |>
sum(na.rm = TRUE)
)
all_dates
all_dates = studies |>
pivot_longer(cols = everything()) |> # make start_date, completion_date in one column
select(-name) |>
distinct() |> # distinct value (date)
arrange(value) |>
na.omit() |>
rename(date = value)
# find the unique dates, see if trials are active on those dates
within_date = function(date, starts, ends) {
date >= starts & date <= ends
}
# Get the number of concurrent trials at each of the unique dates.
all_dates$count =
map_dbl(
all_dates$date,
~ .x |>
within_date(d$start_date, d$completion_date) |>
sum(na.rm = TRUE)
)
all_dates
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
unique(interventions_local$intervention_type)
runApp()
runApp()
interventionType <- c(unique(interventions_local$intervention_type))
selected_interventions <- interventions %>%
filter(intervention_type %in% interventionType)
selected_interventions
interventions %>%
filter(intervention_type %in% interventionType) %>%
left_join(outcomes, by = "nct_id")
interventions |>
filter(intervention_type %in% interventionType) |>
left_join(outcomes, by = "nct_id") |>
count(outcome_type) |>
arrange(desc(n))
unique(interventions_local$intervention_type)
runApp()
runApp()
countries
conditions
install.packages(c("tm", "wordcloud"))
studies |>
inner_join(conditions, by="nct_id")
studies |>
inner_join(conditions, by="nct_id") |>
collect() # delete later
######################################################################
#################### Test for feature 5: Search on Interventions, ####
####################  return pie chart of outcomes. ##################
# Function to generate a pie chart based on outcome types for a given intervention
num_con = studies |>
inner_join(conditions, by="nct_id") |>
collect() # delete later
corpus <- Corpus(VectorSource(num_con$name))
library(dplyr)
library(duckdb)
library(dplyr)
library(DBI)
library(DT)
library(ggplot2)
library(tidyr)
library(purrr)
library(countrycode)
library(rnaturalearth)
library(rnaturalearthdata)
library(RColorBrewer)
library(tm)
library(wordcloud)
corpus <- Corpus(VectorSource(num_con$name))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, stopwords("en"))
corpus <- tm_map(corpus, stripWhitespace)
wordcloud(words = corpus, scale=c(5,0.5), max.words=100, random.order=FALSE, colors=brewer.pal(8, "Dark2"))
runApp()
runApp()
runApp()
######################################################################
#################### Test for feature 5: Word Cloud ##################
#################### Create Word Cloud of Conditions. ################
# Function to generate a pie chart based on outcome types for a given intervention
num_con = studies |>
inner_join(conditions, by="nct_id") |>
collect() # delete later
corpus <- Corpus(VectorSource(num_con$name))
# corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, stopwords("en"))
wordcloud(words = corpus, scale=c(5,0.5), max.words=100, random.order=FALSE, colors=brewer.pal(8, "Dark2"))
unique(num_con$name)
runApp()
runApp()
c(unique(interventions_local$intervention_type))
runApp()
runApp()
runApp()
runApp()
